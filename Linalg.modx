MODULE Linalg
    
    ! Returns the normalized vector. 
PROC LinalgNorm(num vector{*},INOUT num normVector{*})

    VAR num squareSum;
    VAR num length;
    
    FOR i FROM 1 TO Dim(vector,1) DO
        squareSum := squareSum + Pow(vector{i},2);
    ENDFOR
    length := Sqrt(squareSum);
    
    FOR i FROM 1 TO Dim(vector,1) DO
        normVector{i} := vector{i}/length;
    ENDFOR
    
ENDPROC

! Returns the length of a vector. 
FUNC num LinalgGetLength(num vector{*})
    VAR num squareSum;
    VAR num length;
    
    FOR i FROM 1 TO Dim(vector,1) DO
        squareSum := squareSum + Pow(vector{i},2);
    ENDFOR
    length := Sqrt(squareSum);
    
    RETURN length;
    
ENDFUNC
! Modifies the inserted matrix to the result of the matrix multiplication. Only for 3x3 matrixces. 
PROC LinalgMatmul(num matrix1{*,*},num matrix2{*,*},INOUT num matrix3{*,*})
    VAR num mat1{3,3};
    VAR num mat2{3,3};
    VAR num mat3{3,3};
    
    VAR num i11;
    VAR num i12;
    VAR num i13;
    VAR num i21;
    VAR num i22;
    VAR num i23;
    VAR num i31;
    VAR num i32;
    VAR num i33;
 
    VAR num j11;
    VAR num j12;
    VAR num j13;
    VAR num j21;
    VAR num j22;
    VAR num j23;
    VAR num j31;
    VAR num j32;
    VAR num j33;
    
    mat1 := matrix1;
    mat2 := matrix2;
    
    i11 := mat1{1,1};
    i12 := mat1{1,2};
    i13 := mat1{1,3};
    i21 := mat1{2,1};
    i22 := mat1{2,2};
    i23 := mat1{2,3};
    i31 := mat1{3,1};
    i32 := mat1{3,2};
    i33 := mat1{3,3};
    
    j11 := mat2{1,1};
    j12 := mat2{1,2};
    j13 := mat2{1,3};
    j21 := mat2{2,1};
    j22 := mat2{2,2};
    j23 := mat2{2,3};
    j31 := mat2{3,1};
    j32 := mat2{3,2};
    j33 := mat2{3,3};
    
    mat3 := [[i11 * j11 + i12 * j21 + i13 * j31, i11 * j12 + i12 * j22 + i13 * j32, i11 * j13 + i12 * j23 + i13 * j33],
             [i21 * j11 + i22 * j21 + i23 * j31, i21 * j12 + i22 * j22 + i23 * j32, i21 * j13 + i22 * j23 + i23 * j33],
             [i31 * j11 + i32 * j21 + i33 * j31, i31 * j12 + i32 * j22 + i33 * j32, i31 * j13 + i32 * j23 + i33 * j33]];
             
    matrix3:= mat3;
    
ENDPROC

    ! Modifies the inserted matrix into a column stack of the three given vectors.
PROC LinalgColumnStack(num vector1{*},num vector2{*},num vector3{*},INOUT num matrix{*,*})
    matrix :=   [[vector1{1},vector2{1},vector3{1}],
                [vector1{2},vector2{2},vector3{2}],
                [vector1{3},vector2{3},vector3{3}]];
ENDPROC

    ! Modifies the inserted vector into the scaled version of the vector.
PROC LinalgScalarMult(num scalar, num vector{*}, INOUT num scaledVector{*})
    VAR num scaledX; 
    VAR num scaledY;
    VAR num scaledZ; 
    scaledX := scalar*vector{1};
    ScaledY := scalar*vector{2};
    ScaledZ := scALAR*vector{3};
    scaledVector := [scaledX,scaledY,scaledZ];
ENDPROC

    ! Modifies the inserted vector into the scaled version of the vector.
FUNC pos LinalgScalarMultPos(num scalar, num vector{*})
    VAR pos scaledVector;
    VAR num scaledX; 
    VAR num scaledY;
    VAR num scaledZ; 
    scaledX := scalar*vector{1};
    ScaledY := scalar*vector{2};
    ScaledZ := scALAR*vector{3};
    scaledVector := [scaledX,scaledY,scaledZ];
    RETURN scaledVector;
ENDFUNC

    ! Returns the dot product of the two vectors. 
FUNC num LinalgDot(num vector1{*}, num vector2{*})
    VAR num dotProd; 
    dotProd := vector1{1}*vector2{1} + vector1{2}*vector2{2} + vector1{3}*vector2{3};
    RETURN dotProd;
ENDFUNC

    ! Modifies the inserted vector into the cross product of the two vectors. 
PROC LinaglCross(num vector1{*},num vector2{*}, INOUT num crossVec{*})
    VAR num a1;
    VAR num a2;
    VAR num a3;
    VAR num b1;
    VAR num b2;
    VAR num b3;
    
    a1 := vector1{1};
    a2 := vector1{2};
    a3 := vector1{3};
    
    b1 := vector2{1};
    b2 := vector2{2};
    b3 := vector2{3};
    
    crossVec := [a2*b3 - a3*b2, a3*b1 -a1*b3,a1*b2-a2*b1];

ENDPROC

 FUNC num LinalgDistBetweenPoints(num vector1{*},num vector2{*})
    VAR num vector{3};
    VAR num length;
    VAR num xPow;
    VAR num yPow;
    VAR num zPow;
    VAR num squareSum;
    
    vector{1} := vector2{1} - vector1{1}; 
    vector{2} := vector2{2} - vector1{2}; 
    vector{3} := vector2{3} - vector1{3}; 
    
    xPow := Pow(vector{1},2);
    yPow := Pow(vector{2},2);
    zPow := Pow(vector{3},2);
    squareSum := xPow + yPow + ZPow;
    length := Sqrt(squareSum);

    RETURN length;    
    
ENDFUNC


 FUNC num LinalgDistBetweenTargets(robtarget target1, robtarget target2)
    VAR num vector1{3};
    VAR num vector2{3};
    VAR num vector{3};
    VAR num length;
    VAR num xPow;
    VAR num yPow;
    VAR num zPow;
    VAR num squareSum;
    
    GenerPosToNumVector target1.trans,vector1;
    GenerPosToNumVector target2.trans,vector2;
    
    vector{1} := vector2{1} - vector1{1}; 
    vector{2} := vector2{2} - vector1{2}; 
    vector{3} := vector2{3} - vector1{3}; 
    
    xPow := Pow(vector{1},2);
    yPow := Pow(vector{2},2);
    zPow := Pow(vector{3},2);
    squareSum := xPow + yPow + ZPow;
    length := Sqrt(squareSum);

    RETURN length;    
    
ENDFUNC

PROC LinalgElWiseSub(num vector1{*}, num vector2{*}, INOUT num vector{*})

    FOR i FROM 1 TO Dim(vector,1) DO
        
        vector{i} := vector1{i} - vector2{i};
    
    ENDFOR
ENDPROC

PROC LinalgElWiseSubPosNum(pos pos1, pos pos2, INOUT num vector{*})
    VAR num vector1{3};
    VAR num vector2{3};
    
    GenerPosToNumVector pos1,vector1;
    GenerPosToNumVector pos2,vector2;
    
    FOR i FROM 1 TO Dim(vector,1) DO
        
        vector{i} := vector1{i} - vector2{i};
    
    ENDFOR
    
ENDPROC

PROC LinalgElWiseAdd(num vector1{*}, num vector2{*}, INOUT num vector{*})

    FOR i FROM 1 TO Dim(vector,1) DO
        
        vector{i} := vector2{i} + vector1{i};
    
    ENDFOR
ENDPROC

PROC LinalgElWiseMult(num vector1{*}, num vector2{*}, INOUT num vector{*})

    FOR i FROM 1 TO Dim(vector,1) DO
        
        vector{i} := vector2{i} * vector1{i};
    
    ENDFOR
ENDPROC

PROC LinalgElWiseDiv(num vector1{*}, num vector2{*}, INOUT num vector{*})

    FOR i FROM 1 TO Dim(vector,1) DO
        
        vector{i} := vector2{i} / vector1{i};
    
    ENDFOR

ENDPROC

PROC LinalgGetCol(num matrix{*,*}, num whichCol, INOUT num colVector{*})

    VAR num rowSize; 
    rowSize := Dim(matrix, 1);

    FOR i FROM 1 TO rowSize DO

        colVector{i} := matrix{i, whichCol}; 

        ENDFOR
ENDPROC

PROC LinalgGetRow(num matrix{*,*}, num whichRow, INOUT num rowVector{*}) 

    VAR num colSize;
    colSize := Dim(matrix, 2);

    
    FOR i FROM 1 TO colSize DO

    rowVector{i} := matrix{whichRow, i}; 

    ENDFOR

ENDPROC

PROC LinalgMatrixVectorProduct(num matrix{*,*}, num vector{*}, INOUT num result{*})
    FOR i FROM 1 TO 3 DO
        result{i} := 0;
        FOR j FROM 1 TO 3 DO
            result{i} := result{i} + matrix{i,j} * vector{j};
        ENDFOR
    ENDFOR
ENDPROC

PROC LinalgMatmulGeneral(num matrix1{*,*},num matrix2{*,*},INOUT num matrix3{*,*})
    VAR num mat1Dim1;
    VAR num mat1Dim2;
    VAR num mat2Dim1;
    VAR num mat2Dim2;
    mat1Dim1 := Dim(matrix1,1);
    mat1Dim2 := Dim(matrix1,2);
    mat2Dim1 := Dim(matrix2,1);
    mat2Dim2 := Dim(matrix2,2);

    ! Check if the matrices are square and have the same dimensions
    IF mat1Dim1 <> mat1Dim2 OR mat2Dim1 <> mat2Dim2 OR mat1Dim1 <> mat2Dim1 THEN
        TPWrite "Error: Both input matrices must be square and of same dimension.";
        RETURN;
    ENDIF

    ! Matrix for the result

    FOR i FROM 1 TO mat1Dim1 DO
        FOR j FROM 1 TO mat1Dim2 DO
            matrix3{i, j} := 0;
            FOR k FROM 1 TO mat1Dim2 DO
                matrix3{i, j} := matrix3{i, j} + matrix1{i, k} * matrix2{k, j};
            ENDFOR
        ENDFOR
    ENDFOR

ENDPROC

    
ENDMODULE